@startuml

class  mastermind.Color{
+ {static} RED: Color
+ {static} BLUE: Color
+ {static} YELLOW: Color
+ {static} GREEN: Color
+ {static} ORANGE: Color
+ {static} PURPLE: Color
- initial: char
- Color(char)
+ {static} valueOf(String): Color
~ {static} length(): int
~ {static} getInstance(char): Color
~ {static} getInstance(int): Color
~ {static} allInitials(): String
~ getInitial(): char
}

class  mastermind.Combination{
- {static} WIDTH: int
# colors: List<Color>
# Combination()
~ {static} getWidth(): int
}
mastermind.utils.WithConsoleModel <|-down- mastermind.Combination
mastermind.Combination *-down-> java.util.List
mastermind.Combination *-down-> mastermind.Color

class  mastermind.Error{
+ {static} DUPLICATED: Error
+ {static} WRONG_CHARACTERS: Error
+ {static} WRONG_LENGTH: Error
- message: String
- Error(String)
+ {static} valueOf(String): Error
~ getMessage(): String
}

class  mastermind.Mastermind{
~ {static} NO_ERROR: int
- {static} MAX_LONG: int
- secretCombination: SecretCombination
- proposedCombinations: List<ProposedCombination>
- results: List<Result>
- turn: int
- Mastermind()
+ {static} main(String[]): void
- proposeCombination(int[]): int
- play(): void
- getCodes(): int[][][]
}
mastermind.utils.WithConsoleModel <|-down- mastermind.Mastermind
mastermind.Mastermind *-down-> java.util.List
mastermind.Mastermind *-down-> mastermind.ProposedCombination
mastermind.Mastermind *-down-> mastermind.Result
mastermind.Mastermind *-down-> mastermind.SecretCombination
mastermind.Mastermind ..> mastermind.Message

class  mastermind.Message{
+ {static} TURN: Message
+ {static} SECRET: Message
+ {static} RESUME: Message
+ {static} RESULT: Message
+ {static} PROPOSED_COMBINATION: Message
+ {static} TITLE: Message
+ {static} WINNER: Message
+ {static} LOOSER: Message
- message: String
- Message(String)
+ {static} valueOf(String): Message
~ getMessage(): String
}

class  mastermind.ProposedCombination{
- {static} ERROR_CODE: int
~ ProposedCombination()
~ contains(Color): boolean
~ contains(int, Color): boolean
~ {static} getInstance(int[]): ProposedCombination
~ write(int[]): void
~ read(): int[]
~ {static} isValid(int[]): Error
~ getCodes(): int[]
}
mastermind.Combination <|-down- mastermind.ProposedCombination
mastermind.ProposedCombination ..> mastermind.Error
mastermind.ProposedCombination ..> mastermind.Message

class  mastermind.Result{
- blacks: int
- whites: int
~ Result(int, int)
~ isWinner(): boolean
~ getCodes(): int[]
~ writeln(): void
}
mastermind.utils.WithConsoleModel <|-down- mastermind.Result
mastermind.Result ..> mastermind.Message

class  mastermind.SecretCombination{
~ SecretCombination()
~ getResult(ProposedCombination): Result
~ writeln(): void
}
mastermind.Combination <|-down- mastermind.SecretCombination
mastermind.SecretCombination ..> mastermind.ProposedCombination
mastermind.SecretCombination ..> mastermind.Result
mastermind.SecretCombination ..> mastermind.Message

class  mastermind.utils.Console{
- bufferedReader: BufferedReader
+ Console()
+ write(char): void
+ write(String): void
+ readInt(String): int
+ readChar(String): char
+ readString(String): String
+ writeln(int): void
+ writeln(String): void
+ writeln(): void
- writeError(String): void
}
mastermind.utils.Console *-down-> java.io.BufferedReader

class  mastermind.utils.WithConsoleModel{
# console: Console
# WithConsoleModel()
}
mastermind.utils.WithConsoleModel *-down-> mastermind.utils.Console

class  mastermind.utils.YesNoDialog{
- {static} AFIRMATIVE: char
- {static} NEGATIVE: char
- {static} QUESTION: String
- {static} MESSAGE: String
+ YesNoDialog()
+ read(String): boolean
- {static} isNegative(char): boolean
- {static} isAfirmative(char): boolean
}
mastermind.utils.WithConsoleModel <|-down- mastermind.utils.YesNoDialog

@enduml